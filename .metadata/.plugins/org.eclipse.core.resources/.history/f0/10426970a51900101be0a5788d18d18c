package days02;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Iterator;

import org.doit.domain.DeptVO;

import com.util.DBConn;

public class Ex05_02 {
	public static void main(String[] args) {
//		부서 정보를 ArrayList로 반환하는 메서드
//		해당 사원 정보를 반환하는 메서드 를 만들어보세요 
		
		package days02;

		import java.sql.Connection;
		import java.sql.DriverManager;
		import java.sql.ResultSet;
		import java.sql.SQLException;
		import java.sql.Statement;
		import java.time.LocalDateTime;
		import java.util.ArrayList;
		import java.util.Iterator;
		import java.util.Scanner;

		import org.doit.domain.DeptVO;
		import org.doit.domain.EmpVO;

		import com.util.DBConn;

		/**
		 * @author kEnik
		 * @date 2025. 4. 15. 오전 11:24:16
		 * @subject
		 * @content  1. 부서 정보를 출력
		 *           2. 부서를 선택하세요 ? 10  엔터
		 *           3. 해당 부서의 사원들 정보를 출력.
		 */
		public class Ex05 {

		   public static void main(String[] args) {      

		      String sql = "SELECT *"
		            + " FROM dept";

		      Connection conn = null;
		      Statement stmt = null;
		      ResultSet rs = null;

		      int deptno ;
		      String dname, loc;

		      DeptVO dvo = null;
		      ArrayList<DeptVO> dlist = null; 

		      try {
		         conn =  DBConn.getConnection();
		         // 3. CRUD 
		         stmt = conn.createStatement();                
		         rs = stmt.executeQuery(sql);  

		         if ( rs.next() ) {
		            dlist= new ArrayList<DeptVO>();            
		            do {
		               deptno = rs.getInt("deptno");
		               dname = rs.getString("dname");
		               loc = rs.getString("loc");               
		               dvo = new DeptVO(deptno, dname, loc);
		               dlist.add(dvo);               
		            } while (rs.next());            
		         } // if

		         // 다른 레이어 계층  list 전달 -> 출력
		         dispDeptInfo(dlist);
		      } catch (SQLException e) {
		         e.printStackTrace();
		      } finally {
		         try {
		            rs.close();
		            stmt.close();            
		         } catch (SQLException e) {
		            e.printStackTrace();
		         }
		      }      
		      // 부서 정보 출력 완료!!
		      Scanner scanner = new Scanner(System.in);
		      System.out.print("> 부서번호 입력 ? ");
		      deptno = scanner.nextInt(); // 유효성 검사

		      // 해당 부서원들 출력
		      ArrayList<EmpVO> elist = null;
		      
		      sql = "SELECT * "
		            + " FROM emp"
		            + " WHERE deptno = " + deptno;

		      int empno;              
		      String ename;           
		      String job;             
		      int mgr;                
		      LocalDateTime hiredate; 
		      double sal;             
		      double comm;      

		      EmpVO evo = null;

		      // 3 CRUD
		      try {
		         stmt = conn.createStatement();
		         rs = stmt.executeQuery(sql);  // select
		         // int stmt.executeUpdate(sql);  insert, update, delete DML
		         if (rs.next()) {
		            elist = new ArrayList<EmpVO>();
		            do {
		               empno = rs.getInt("empno");              
		               ename = rs.getString("ename");           
		               job = rs.getString("job");             
		               mgr = rs.getInt("mgr");    
		               // LocalDateTime 변환
		               hiredate = rs.getTimestamp("hiredate").toLocalDateTime(); 
		               sal = rs.getDouble("sal");             
		               comm = rs.getDouble("comm");              
		               deptno = rs.getInt("deptno");

		               evo = new EmpVO(empno, ename, job, mgr, hiredate, sal, comm, deptno);

		               elist.add(evo);
		            } while (rs.next());

		            // 다른 레이어 계층  list 전달 -> 출력
		            dispEmpInfo(elist);
		         } // if

		      } catch (SQLException e) {
		         e.printStackTrace();
		      } finally {
		         try {
		            if(rs != null )   rs.close();            
		            if(stmt != null ) stmt.close();
		            DBConn.close(); // 4
		         } catch (SQLException e) { 
		            e.printStackTrace();
		         }
		      }


		   } // main

		   private static void dispEmpInfo(ArrayList<EmpVO> list) {

		      if ( list == null ) {
		         System.out.println("사원이 존재하지 않습니다.");
		         return ;
		      } // if

		      // 1. Iterator 반복자 사용해서 출력.
		      // 2. 람다식 사용해서 출력.
		      /*
		      list.forEach(vo->{
		         System.out.println( vo );
		      });
		       */

		      // 메서드 참조( Method Reference ) 사용
		      list.forEach(System.out::println );

		   }

		   private static void dispDeptInfo(ArrayList<DeptVO> list) {
		      // if( list.isEmpty() )
		      if( list == null ) {
		         System.out.println("> 조회한 부서가 없다.");
		         return;
		      }

		      Iterator<DeptVO> ir = list.iterator();
		      while (ir.hasNext()) {
		         DeptVO vo = ir.next();
		         System.out.println( vo );
		      }

		   }
		} // class

	}
}

package days04.board.controller;

import java.io.IOException;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Scanner;

import com.util.DBConn;

import days04.board.domain.BoardDTO;
import days04.board.service.BoardService;

public class BoardController {
	
	private BoardService boardService;
	private Scanner scanner = null; // 객체 생성 시 생성
	private int selectedNumber ;
	// [ 페이징 처리 시 필요한 필드 선언 ]
	
	public BoardController() {
		super();
		this.scanner = new Scanner(System.in);
	}

	// 생성자 DI
	public BoardController(BoardService boardService) {
		this(); // 또 다른 생성자 호출 : scanner 객체 생성
		this.boardService = boardService;
	}
	
	// 게시판과 관련된 모든 기능 시작 함수
	public void boardStart() {
		while (true) {
			메뉴출력();
			메뉴선택();
			메뉴처리();
		} // while
	}
	
	public enum Board {
	       NEW,        // 새글
	       LIST,       // 목록
	       VIEW,       // 보기
	       EDIT,       // 수정
	       DELETE,     // 삭제
	       SEARCH,     // 검색
	       EXIT        // 종료
	   }

	private void 메뉴처리() {
		
		Board selectedMenu = Board.values()[selectedNumber - 1];
		      
		      switch (selectedMenu) {
		      case NEW:// 새글   O
		         새글쓰기();
		         break;
		      case LIST:// 목록  O
		         목록보기();
		         break;
		      case VIEW:// 보기  O
		         상세보기();
		         break;
		      case EDIT:// 수정  O
		         수정하기();
		         break;
		      case DELETE:// 삭제  O
		         삭제하기();
		         break;
		      case SEARCH:// 검색
		         검색하기();
		         break;
		      case EXIT:// 종료   
		         exit();
		         break; 
		      } // switch

		      일시정지();
		      
		   }

	private void 일시정지() {
		System.out.println(" \t\t 계속하려면 엔터치세요.");
	      try {
	         System.in.read();
	         System.in.skip(System.in.available()); // 13, 10
	      } catch (IOException e) { 
	         e.printStackTrace();
	      }
		
	}

	private void exit() {
		DBConn.close();
	      System.out.println("\t\t\t  프로그램 종료!!!");
	      System.exit(-1);
	}

	private void 검색하기() {
		// TODO Auto-generated method stub
		
	}

	private void 삭제하기() {
		System.out.println("> 삭제할 게시물 번호 입력?");
		long seq = this.scanner.nextLong();
		
		int rowCount = this.boardService.deleteService(seq);
		
		
		if (rowCount == 1) {
			System.out.println("> 게시글 삭제 성공.");
			목록보기();
		} else {
			System.out.println(" 게시글 삭제 실패. ");
		}
		
	}

	private void 수정하기() {
		// 글 상세보기 -> [수정] 버튼 클릭 -> 수정 페이지로 이동
		System.out.println("> 수정하고자 하는 게시글 번호 입력");
		long seq = this.scanner.nextLong();
		
		// 상세보기 복사 시작
		BoardDTO dto = this.boardService.viewService(seq);
		
		if (dto == null) {
			System.out.println("> 게시글이 존재하지 않습니다.");
			return;
		} // if
		
		// M[V]C : 출력담당 객체 (jsp 페이지)
		System.out.println("\tㄱ. 글번호 : "+ seq);
		System.out.println("\tㄴ. 작성자 : "+ dto.getWriter());
		System.out.println("\tㄷ. 조회수 : "+ dto.getReaded());
		System.out.println("\tㄹ. 글제목 : "+ dto.getTitle());
		System.out.println("\tㅁ. 글내용 : "+ dto.getContent());
		System.out.println("\tㅂ. 작성일 : "+ dto.getWritedate());
		
		// 인증받은 작성자 == 글쓴이라면 수정/삭제 가능
		if ("권태정".equals(dto.getWriter())) {
			System.out.println("\t\n [수정] [삭제]");
		} // if
		System.out.println("\t\n [답글] [목록(home)]");
		
		// 상세보기 복사 끝
		
		// 수정 값 입력
		System.out.println("> 1. 이메일 입력");
		String email = scanner.nextLine();
		System.out.println("> 2. 제목 입력");
		String title = scanner.nextLine();
		System.out.println("> 3. 내용 입력");
		String content = scanner.nextLine();
		
		if (email.trim().equals("")) email = dto.getEmail();
		if (title.trim().equals("")) title = dto.getTitle();
		if (content.trim().equals("")) content = dto.getContent();
	
		dto = BoardDTO.builder()
						.seq(seq)
						.email(email)
						.title(title)
						.content(content)
						.build();
				
	}

	private void 상세보기() {
		System.out.println("> 볼 게시물 번호 입력?");
		long seq = this.scanner.nextLong();
		
		BoardDTO dto = this.boardService.viewService(seq);
		
		if (dto == null) {
			System.out.println("> 게시글이 존재하지 않습니다.");
			return;
		} // if
		
		// M[V]C : 출력담당 객체 (jsp 페이지)
		System.out.println("\tㄱ. 글번호 : "+ seq);
		System.out.println("\tㄴ. 작성자 : "+ dto.getWriter());
		System.out.println("\tㄷ. 조회수 : "+ dto.getReaded());
		System.out.println("\tㄹ. 글제목 : "+ dto.getTitle());
		System.out.println("\tㅁ. 글내용 : "+ dto.getContent());
		System.out.println("\tㅂ. 작성일 : "+ dto.getWritedate());
		
		// 인증받은 작성자 == 글쓴이라면 수정/삭제 가능
		if ("권태정".equals(dto.getWriter())) {
			System.out.println("\t\n [수정] [삭제]");
		} // if
		System.out.println("\t\n [답글] [목록(home)]");
		
		
	}

	private void 목록보기() {
		System.out.println("> 현재 페이지번호를 입력? ");
		List<BoardDTO> list = this.boardService.selectService(); // dao, dao.select() -> Oracle DB 연동해서 처리 -> LIist<DTO>
		
		// M[View]C
		// 출력 담당자[M]에게 원래 넘겨야 함. 원래 컨트롤러 기능 아님
		System.out.println("\t\t\t 게시판");
		System.out.println("----------------------------------------------------------------------------------------------------------");
		System.out.printf("%s\t%-40s%s\t%-10s\t%s\n", "글번호", "글제목", "작성자" , "작성날짜" ,"조회수" );

		System.out.println("----------------------------------------------------------------------------------------------------------");
		
		if(list == null) {
			System.out.println("\t\t > 게시글 존재 X");
		} else {
			/*
			Iterator<BoardDTO> ir = list.iterator();
			while (ir.hasNext()) {
				BoardDTO dto = ir.next();
				System.out.printf("%d\t%-30s     %s\t%10s\t%d\n",
										);

				
			} // while
			*/
			
			// 위의 코딩 람다심으로 수정
			list.forEach(dto -> {
				System.out.printf("%d\t%-30s          %s\t%10s\t%d\n"
											,dto.getSeq()
											,dto.getTitle()
											,dto.getWriter()
											,dto.getWritedate()
											,dto.getReaded()
						);
				
			});
		}
		
		System.out.println("----------------------------------------------------------------------------------------------------------");
		 System.out.println("\t\t[1] 2 3 4 5 6 7 8 9 10 NEXT");
		System.out.println("----------------------------------------------------------------------------------------------------------");
		
	}

	private void 새글쓰기() {
		//					  홍길동,1234,hong@naver.com,제목.....,0,내용 엔터
		System.out.println("> writer, pwd, email, title, tag, content 입력 ?");
		String [] datas = this.scanner.nextLine().split("\\s*,\\s*");
		String writer = datas[0];
		String pwd = datas[1];    
		String email = datas[2];  
		String title = datas[3];   
		int tag = Integer.parseInt(datas[4]);       
		String content = datas[5];
		
		BoardDTO dto = new BoardDTO().builder()
									.writer(writer)
									.pwd(pwd)
									.email(email)
									.title(title)
									.tag(tag)
									.content(content)
									.build();
		//매개변수, 리턴값 정하기
		int rowCount = this.boardService.insertService(dto); // 1 -> insert 성공
		if (rowCount == 1) {
			System.out.println("> 새글쓰기 성공");
			목록보기(); // 목록페이지로 이동
		} // if
				
	}

	private void 메뉴출력() {
	      String [] menu = {"새글","목록","보기","수정","삭제","검색","종료"};
	      System.out.println("[ 메뉴 ]");
	      for (int i = 0; i < menu.length; i++) {
	         System.out.printf("%d. %s\t", i+1, menu[i]);
	      }
	      System.out.println();
	   }

	   private void 메뉴선택() {
	      System.out.print("> 메뉴 선택하세요 ? ");
	      this.selectedNumber = this.scanner.nextInt();      
	      this.scanner.nextLine(); //   \r\n 제거
	   }
	
	
	
} // class
